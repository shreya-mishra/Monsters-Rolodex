{"version":3,"sources":["components/card-list/card-list.components.jsx","components/search-box/search-box.components.jsx","App.js","serviceWorker.js","index.js"],"names":["CardList","props","SearchBox","placeholder","handleChange","className","type","onChange","App","e","setState","searchField","target","value","state","monsters","fetch","then","response","json","users","this","filteredMonsters","filter","monster","name","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6UAIaA,G,YAAW,SAAAC,MCCXC,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACzB,2BAAOC,UAAU,SAASC,KAAK,SAASH,YAAaA,EAAaI,SAAUH,MCsD7DI,G,wDArDX,aAAc,IAAD,8BACX,gBAeFJ,aAAa,SAAAK,GAEX,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAhBrC,EAAKC,MAAM,CACTC,SAAS,GACTJ,YAAY,IAJH,E,gEAUO,IAAD,OACjBK,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAK,OAAI,EAAKV,SAAS,CAACK,SAASK,S,+BAWhC,IAAD,EACuBC,KAAKP,MAA3BC,EADD,EACCA,SAASJ,EADV,EACUA,YAMVW,EAAmBP,EAASQ,QAAO,SAAAC,GAAO,OAC9CA,EAAQC,KAAKC,cAAcC,SAAShB,EAAYe,kBAElD,OACE,yBAAKrB,UAAU,OACf,kDAEF,kBAAC,EAAD,CACAF,YAAY,kBAAkBC,aAAciB,KAAKjB,eAG7C,kBAAC,EAAD,CAAUW,SAAUO,S,GA5CVM,cCMAC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD6H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f0e5ee6e.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Card}from'../cards/card.components';\r\nimport './card-list.styles.css';\r\n\r\nexport const CardList = props =>(\r\n//console.log(props);\r\n <div className='card-list'>\r\n    {props.monsters.map(monster=>(\r\n       <Card key={monster.id}monster={monster}/>\r\n  \r\n    ))}\r\n    </div>\r\n);\r\n\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\n//functional component thedont have state \r\nexport const SearchBox = ({placeholder,handleChange}) =>(\r\n<input className='search' type='search' placeholder={placeholder} onChange={handleChange}\r\n      \r\n      />\r\n)","import React,{Component}  from 'react';\nimport {CardList}from'./components/card-list/card-list.components';\nimport{SearchBox}from'./components/search-box/search-box.components';\nimport './App.css';\n\n\n  class App extends Component{\n    constructor(){\n      super();\n      this.state={  \n        monsters:[],\n        searchField:'' \n      };\n      //this.handleChange=this.handleChange.bind(this);\n    }\n    \n\n    componentDidMount(){\n      fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      //.then(users => console.log(users)) \n      .then(users => this.setState({monsters:users}));\n    }\n    handleChange=e=>\n    {\n      this.setState({searchField: e.target.value})\n    }\n\n    // Whenever set state is called and the properties change then react re renders the function which means that\n    //the filteredMonsters function re render again\n    // this way we are dynamically update the state \n    \n    render(){\n      const{ monsters,searchField}=this.state;\n      /* this is simpler way to pull the values we can also use ilter value\n      const monsters=this.state.monsters;\n      const searchField=this.state.searchField;*/\n      \n      //filtering method\n      const filteredMonsters = monsters.filter(monster=>\n        monster.name.toLowerCase().includes(searchField.toLowerCase())\n        ) ;   // include return value true or false based on the condition\n      return(\n        <div className='App'> \n        <h1> Monsters Rolodex </h1>\n        \n      <SearchBox\n      placeholder='search monsters' handleChange={this.handleChange}\n      />\n        \n          <CardList monsters={filteredMonsters}>\n          \n          </CardList>\n          \n        </div>\n      );\n    }\n\n  }\n  \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}